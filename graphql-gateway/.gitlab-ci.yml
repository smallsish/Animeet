stages:
  - Static Analysis
  - Test
  - Release

# Flake8 static analysis for code style
flake8:
  stage: Static Analysis
  image: python:3.12-slim
  before_script:
    - python -V
    - python -m pip install flake8
  script:
    - flake8 src | tee flake8_report.txt
  artifacts:
    when: on_failure
    paths:
      - flake8_report.txt
  allow_failure: true
  when: manual  # Set to manual

# Pylint static analysis for code quality
pylint:
  stage: Static Analysis
  image: python:3.12-slim
  before_script:
    - python -V
    - python -m pip install -r requirements.txt
    - python -m pip install pylint
  script:
    - pylint --fail-under=7 src | tee pylint_report.txt
  artifacts:
    when: on_failure
    paths:
      - pylint_report.txt
  allow_failure: true
  when: manual  # Set to manual

# Integration Tests
integration-tests:
  stage: Test
  image: docker:27.1.1
  services:
    - docker:27.1.1-dind
  before_script:
    - docker info
  script:
    # Start services and run tests
    - docker compose -f ci/compose.test.yaml up --exit-code-from payment-pytest
  after_script:
    # Cleanup services and volumes after the tests
    - docker compose -f ci/compose.test.yaml down -v
  allow_failure: true
  when: manual  # Set to manual

release-image:
  stage: Release
  image: docker:27.1.1
  services:
    - docker:27.1.1-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:latest" -t "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$CI_COMMIT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH" --all-tags